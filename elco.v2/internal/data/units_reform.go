// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type unitsTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *unitsTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("units").
func (v *unitsTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *unitsTableType) Columns() []string {
	return []string{"units_name", "code"}
}

// NewStruct makes a new struct for that view or table.
func (v *unitsTableType) NewStruct() reform.Struct {
	return new(Units)
}

// NewRecord makes a new record for that table.
func (v *unitsTableType) NewRecord() reform.Record {
	return new(Units)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *unitsTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// UnitsTable represents units view or table in SQL database.
var UnitsTable = &unitsTableType{
	s: parse.StructInfo{Type: "Units", SQLSchema: "", SQLName: "units", Fields: []parse.FieldInfo{{Name: "UnitsName", Type: "string", Column: "units_name"}, {Name: "Code", Type: "uint8", Column: "code"}}, PKFieldIndex: 0},
	z: new(Units).Values(),
}

// String returns a string representation of this struct or record.
func (s Units) String() string {
	res := make([]string, 2)
	res[0] = "UnitsName: " + reform.Inspect(s.UnitsName, true)
	res[1] = "Code: " + reform.Inspect(s.Code, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Units) Values() []interface{} {
	return []interface{}{
		s.UnitsName,
		s.Code,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Units) Pointers() []interface{} {
	return []interface{}{
		&s.UnitsName,
		&s.Code,
	}
}

// View returns View object for that struct.
func (s *Units) View() reform.View {
	return UnitsTable
}

// Table returns Table object for that record.
func (s *Units) Table() reform.Table {
	return UnitsTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Units) PKValue() interface{} {
	return s.UnitsName
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Units) PKPointer() interface{} {
	return &s.UnitsName
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Units) HasPK() bool {
	return s.UnitsName != UnitsTable.z[UnitsTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Units) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.UnitsName = string(i64)
	} else {
		s.UnitsName = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = UnitsTable
	_ reform.Struct = (*Units)(nil)
	_ reform.Table  = UnitsTable
	_ reform.Record = (*Units)(nil)
	_ fmt.Stringer  = (*Units)(nil)
)

func init() {
	parse.AssertUpToDate(&UnitsTable.s, new(Units))
}
