// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productValueTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productValueTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("product_value").
func (v *productValueTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productValueTableType) Columns() []string {
	return []string{"product_value_id", "product_id", "created_at", "work_index", "gas", "concentration", "current", "threshold1", "threshold2", "mode", "failure_code"}
}

// NewStruct makes a new struct for that view or table.
func (v *productValueTableType) NewStruct() reform.Struct {
	return new(ProductValue)
}

// NewRecord makes a new record for that table.
func (v *productValueTableType) NewRecord() reform.Record {
	return new(ProductValue)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productValueTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductValueTable represents product_value view or table in SQL database.
var ProductValueTable = &productValueTableType{
	s: parse.StructInfo{Type: "ProductValue", SQLSchema: "", SQLName: "product_value", Fields: []parse.FieldInfo{{Name: "ProductValueID", Type: "int64", Column: "product_value_id"}, {Name: "ProductID", Type: "int64", Column: "product_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "WorkIndex", Type: "int", Column: "work_index"}, {Name: "Gas", Type: "Gas", Column: "gas"}, {Name: "Concentration", Type: "float64", Column: "concentration"}, {Name: "Current", Type: "float64", Column: "current"}, {Name: "Threshold1", Type: "bool", Column: "threshold1"}, {Name: "Threshold2", Type: "bool", Column: "threshold2"}, {Name: "Mode", Type: "uint16", Column: "mode"}, {Name: "FailureCode", Type: "float64", Column: "failure_code"}}, PKFieldIndex: 0},
	z: new(ProductValue).Values(),
}

// String returns a string representation of this struct or record.
func (s ProductValue) String() string {
	res := make([]string, 11)
	res[0] = "ProductValueID: " + reform.Inspect(s.ProductValueID, true)
	res[1] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[2] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[3] = "WorkIndex: " + reform.Inspect(s.WorkIndex, true)
	res[4] = "Gas: " + reform.Inspect(s.Gas, true)
	res[5] = "Concentration: " + reform.Inspect(s.Concentration, true)
	res[6] = "Current: " + reform.Inspect(s.Current, true)
	res[7] = "Threshold1: " + reform.Inspect(s.Threshold1, true)
	res[8] = "Threshold2: " + reform.Inspect(s.Threshold2, true)
	res[9] = "Mode: " + reform.Inspect(s.Mode, true)
	res[10] = "FailureCode: " + reform.Inspect(s.FailureCode, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProductValue) Values() []interface{} {
	return []interface{}{
		s.ProductValueID,
		s.ProductID,
		s.CreatedAt,
		s.WorkIndex,
		s.Gas,
		s.Concentration,
		s.Current,
		s.Threshold1,
		s.Threshold2,
		s.Mode,
		s.FailureCode,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProductValue) Pointers() []interface{} {
	return []interface{}{
		&s.ProductValueID,
		&s.ProductID,
		&s.CreatedAt,
		&s.WorkIndex,
		&s.Gas,
		&s.Concentration,
		&s.Current,
		&s.Threshold1,
		&s.Threshold2,
		&s.Mode,
		&s.FailureCode,
	}
}

// View returns View object for that struct.
func (s *ProductValue) View() reform.View {
	return ProductValueTable
}

// Table returns Table object for that record.
func (s *ProductValue) Table() reform.Table {
	return ProductValueTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductValue) PKValue() interface{} {
	return s.ProductValueID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductValue) PKPointer() interface{} {
	return &s.ProductValueID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ProductValue) HasPK() bool {
	return s.ProductValueID != ProductValueTable.z[ProductValueTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *ProductValue) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ProductValueID = int64(i64)
	} else {
		s.ProductValueID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = ProductValueTable
	_ reform.Struct = (*ProductValue)(nil)
	_ reform.Table  = ProductValueTable
	_ reform.Record = (*ProductValue)(nil)
	_ fmt.Stringer  = (*ProductValue)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductValueTable.s, new(ProductValue))
}
