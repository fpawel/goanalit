// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productEntryTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productEntryTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("product_entry").
func (v *productEntryTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productEntryTableType) Columns() []string {
	return []string{"product_entry_id", "product_id", "created_at", "work_name", "ok", "message"}
}

// NewStruct makes a new struct for that view or table.
func (v *productEntryTableType) NewStruct() reform.Struct {
	return new(ProductEntry)
}

// NewRecord makes a new record for that table.
func (v *productEntryTableType) NewRecord() reform.Record {
	return new(ProductEntry)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productEntryTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductEntryTable represents product_entry view or table in SQL database.
var ProductEntryTable = &productEntryTableType{
	s: parse.StructInfo{Type: "ProductEntry", SQLSchema: "", SQLName: "product_entry", Fields: []parse.FieldInfo{{Name: "ProductEntryID", Type: "int64", Column: "product_entry_id"}, {Name: "ProductID", Type: "int64", Column: "product_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "WorkName", Type: "string", Column: "work_name"}, {Name: "Ok", Type: "bool", Column: "ok"}, {Name: "Message", Type: "string", Column: "message"}}, PKFieldIndex: 0},
	z: new(ProductEntry).Values(),
}

// String returns a string representation of this struct or record.
func (s ProductEntry) String() string {
	res := make([]string, 6)
	res[0] = "ProductEntryID: " + reform.Inspect(s.ProductEntryID, true)
	res[1] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[2] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[3] = "WorkName: " + reform.Inspect(s.WorkName, true)
	res[4] = "Ok: " + reform.Inspect(s.Ok, true)
	res[5] = "Message: " + reform.Inspect(s.Message, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProductEntry) Values() []interface{} {
	return []interface{}{
		s.ProductEntryID,
		s.ProductID,
		s.CreatedAt,
		s.WorkName,
		s.Ok,
		s.Message,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProductEntry) Pointers() []interface{} {
	return []interface{}{
		&s.ProductEntryID,
		&s.ProductID,
		&s.CreatedAt,
		&s.WorkName,
		&s.Ok,
		&s.Message,
	}
}

// View returns View object for that struct.
func (s *ProductEntry) View() reform.View {
	return ProductEntryTable
}

// Table returns Table object for that record.
func (s *ProductEntry) Table() reform.Table {
	return ProductEntryTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductEntry) PKValue() interface{} {
	return s.ProductEntryID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductEntry) PKPointer() interface{} {
	return &s.ProductEntryID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ProductEntry) HasPK() bool {
	return s.ProductEntryID != ProductEntryTable.z[ProductEntryTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *ProductEntry) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ProductEntryID = int64(i64)
	} else {
		s.ProductEntryID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = ProductEntryTable
	_ reform.Struct = (*ProductEntry)(nil)
	_ reform.Table  = ProductEntryTable
	_ reform.Record = (*ProductEntry)(nil)
	_ fmt.Stringer  = (*ProductEntry)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductEntryTable.s, new(ProductEntry))
}
